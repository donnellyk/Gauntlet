{"Other Typealiases.html#/s:8Gauntlet9StateTypea":{"name":"StateType","abstract":"<p>Deprecated. Use <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Transitionable.html\">Transitionable</a></code> instead.</p>"},"Enums/GauntletNotification.html#/s:8Gauntlet0A12NotificationO14willTransitionSo18NSNotificationNameavpZ":{"name":"willTransition","abstract":"<p>Name used to post notifications before transitions when <code>GAUNTLET_POST_TEST_NOTIFICATIONS</code> is defined in the environment.</p>","parent_name":"GauntletNotification"},"Enums/GauntletNotification.html#/s:8Gauntlet0A12NotificationO13didTransitionSo18NSNotificationNameavpZ":{"name":"didTransition","abstract":"<p>Name used to post notifications after transitions when <code>GAUNTLET_POST_TEST_NOTIFICATIONS</code> is defined in the environment.</p>","parent_name":"GauntletNotification"},"Enums/GauntletNotification.html":{"name":"GauntletNotification","abstract":"<p>Holds notification name constants. A client may want to define <code>GAUNTLET_POST_TEST_NOTIFICATIONS</code> and  observe notificationas with these names when testing.</p>"},"Classes/StateMachine/StateTransitionDelegates.html#/s:8Gauntlet12StateMachineC0B19TransitionDelegatesV03didD0yx_xtcSgvp":{"name":"didTransition","abstract":"<p>Delegate closure that gets called whenever <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StateMachine.html\">StateMachine</a></code> successfully transitions from one state to another.</p>","parent_name":"StateTransitionDelegates"},"Classes/StateMachine/StateTransitionDelegates.html":{"name":"StateTransitionDelegates","abstract":"<p>Delegate tasks of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StateMachine.html\">StateMachine</a></code>. Consumers can assign implementations to respond to lifecycle events.</p>","parent_name":"StateMachine"},"Classes/StateMachine.html#/s:8Gauntlet12StateMachineC9delegatesAC0B19TransitionDelegatesVyx_Gvp":{"name":"delegates","abstract":"<p>Consumers can assign implementations to protperties of <code>delegates</code> to respond to lifecycle events.</p>","parent_name":"StateMachine"},"Classes/StateMachine.html#/s:8Gauntlet12StateMachineC5statexvp":{"name":"state","abstract":"<p>The current state of the state machine. Read-only.</p>","parent_name":"StateMachine"},"Classes/StateMachine.html#/s:8Gauntlet12StateMachineC07initialB0ACyxGx_tcfc":{"name":"init(initialState:)","abstract":"<p>Initializes the state machine with the given initial state.</p>","parent_name":"StateMachine"},"Classes/StateMachine.html#/s:8Gauntlet12StateMachineC5queueyyxF":{"name":"queue(_:)","abstract":"<p>Use this method to transition states.</p>","parent_name":"StateMachine"},"Protocols/Transitionable.html#/s:8Gauntlet14TransitionableP16shouldTransition2toSbx_tF":{"name":"shouldTransition(to:)","abstract":"<p>Defines whether a transition between two states is legal or illegal.</p>","parent_name":"Transitionable"},"Protocols/Transitionable.html":{"name":"Transitionable","abstract":"<p>Describes the primary unit of state in a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/StateMachine.html\">StateMachine</a></code>. In theory, this could be any type capable of calculating whether a transition between two instances of itself is legal. In practice, itâ€™s almost always an <code>enum</code>:</p>"},"Classes/StateMachine.html":{"name":"StateMachine","abstract":"<p>On Testing:</p>"},"Public Interface.html":{"name":"Public Interface"},"Constants.html":{"name":"Constants"},"Other Typealiases.html":{"name":"Other Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}